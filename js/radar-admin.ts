// @generated by protobuf-ts 1.0.12
// @generated from protobuf file "radar-admin.proto" (syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf message Query
 */
export interface Query {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string query = 2;
     */
    query: string;
}
/**
 * @generated from protobuf message QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1;
         */
        text: string;
    } | {
        oneofKind: "table";
        /**
         * @generated from protobuf field: QueryResponse.Table table = 2;
         */
        table: QueryResponse_Table;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QueryResponse.Table
 */
export interface QueryResponse_Table {
    /**
     * @generated from protobuf field: repeated string columns = 1;
     */
    columns: string[];
    /**
     * @generated from protobuf field: repeated QueryResponse.Table.Row data = 2;
     */
    data: QueryResponse_Table_Row[];
}
/**
 * @generated from protobuf message QueryResponse.Table.Cell
 */
export interface QueryResponse_Table_Cell {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1;
         */
        text: string;
    } | {
        oneofKind: "number";
        /**
         * @generated from protobuf field: double number = 2;
         */
        number: number;
    } | {
        oneofKind: "date";
        /**
         * @generated from protobuf field: uint32 date = 3;
         */
        date: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QueryResponse.Table.Row
 */
export interface QueryResponse_Table_Row {
    /**
     * @generated from protobuf field: repeated QueryResponse.Table.Cell cells = 1;
     */
    cells: QueryResponse_Table_Cell[];
}
/**
 * @generated from protobuf service Admin
 */
export interface IAdminClient {
    /**
     * @generated from protobuf rpc: query(Query) returns (QueryResponse);
     */
    query(input: Query, options?: RpcOptions): UnaryCall<Query, QueryResponse>;
}
/**
 * Type for protobuf message Query
 */
class Query$Type extends MessageType<Query> {
    constructor() {
        super("Query", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Query>): Query {
        const message = { userId: "", query: "" };
        if (value !== undefined)
            reflectionMergePartial<Query>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query): Query {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string query */ 2:
                    message.query = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Query, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string query = 2; */
        if (message.query !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.query);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Query = new Query$Type();
/**
 * Type for protobuf message QueryResponse
 */
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("QueryResponse", [
            { no: 1, name: "text", kind: "scalar", oneof: "content", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "table", kind: "message", oneof: "content", T: () => QueryResponse_Table }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = { content: { oneofKind: undefined } };
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.content = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* QueryResponse.Table table */ 2:
                    message.content = {
                        oneofKind: "table",
                        table: QueryResponse_Table.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).table)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.content.oneofKind === "text")
            writer.tag(1, WireType.LengthDelimited).string(message.content.text);
        /* QueryResponse.Table table = 2; */
        if (message.content.oneofKind === "table")
            QueryResponse_Table.internalBinaryWrite(message.content.table, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const QueryResponse = new QueryResponse$Type();
/**
 * Type for protobuf message QueryResponse.Table
 */
class QueryResponse_Table$Type extends MessageType<QueryResponse_Table> {
    constructor() {
        super("QueryResponse.Table", [
            { no: 1, name: "columns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryResponse_Table_Row }
        ]);
    }
    create(value?: PartialMessage<QueryResponse_Table>): QueryResponse_Table {
        const message = { columns: [], data: [] };
        if (value !== undefined)
            reflectionMergePartial<QueryResponse_Table>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse_Table): QueryResponse_Table {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string columns */ 1:
                    message.columns.push(reader.string());
                    break;
                case /* repeated QueryResponse.Table.Row data */ 2:
                    message.data.push(QueryResponse_Table_Row.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse_Table, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string columns = 1; */
        for (let i = 0; i < message.columns.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.columns[i]);
        /* repeated QueryResponse.Table.Row data = 2; */
        for (let i = 0; i < message.data.length; i++)
            QueryResponse_Table_Row.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const QueryResponse_Table = new QueryResponse_Table$Type();
/**
 * Type for protobuf message QueryResponse.Table.Cell
 */
class QueryResponse_Table_Cell$Type extends MessageType<QueryResponse_Table_Cell> {
    constructor() {
        super("QueryResponse.Table.Cell", [
            { no: 1, name: "text", kind: "scalar", oneof: "content", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "number", kind: "scalar", oneof: "content", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "date", kind: "scalar", oneof: "content", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QueryResponse_Table_Cell>): QueryResponse_Table_Cell {
        const message = { content: { oneofKind: undefined } };
        if (value !== undefined)
            reflectionMergePartial<QueryResponse_Table_Cell>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse_Table_Cell): QueryResponse_Table_Cell {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.content = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* double number */ 2:
                    message.content = {
                        oneofKind: "number",
                        number: reader.double()
                    };
                    break;
                case /* uint32 date */ 3:
                    message.content = {
                        oneofKind: "date",
                        date: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse_Table_Cell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.content.oneofKind === "text")
            writer.tag(1, WireType.LengthDelimited).string(message.content.text);
        /* double number = 2; */
        if (message.content.oneofKind === "number")
            writer.tag(2, WireType.Bit64).double(message.content.number);
        /* uint32 date = 3; */
        if (message.content.oneofKind === "date")
            writer.tag(3, WireType.Varint).uint32(message.content.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const QueryResponse_Table_Cell = new QueryResponse_Table_Cell$Type();
/**
 * Type for protobuf message QueryResponse.Table.Row
 */
class QueryResponse_Table_Row$Type extends MessageType<QueryResponse_Table_Row> {
    constructor() {
        super("QueryResponse.Table.Row", [
            { no: 1, name: "cells", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryResponse_Table_Cell }
        ]);
    }
    create(value?: PartialMessage<QueryResponse_Table_Row>): QueryResponse_Table_Row {
        const message = { cells: [] };
        if (value !== undefined)
            reflectionMergePartial<QueryResponse_Table_Row>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse_Table_Row): QueryResponse_Table_Row {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated QueryResponse.Table.Cell cells */ 1:
                    message.cells.push(QueryResponse_Table_Cell.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse_Table_Row, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated QueryResponse.Table.Cell cells = 1; */
        for (let i = 0; i < message.cells.length; i++)
            QueryResponse_Table_Cell.internalBinaryWrite(message.cells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const QueryResponse_Table_Row = new QueryResponse_Table_Row$Type();
/**
 * @generated from protobuf service Admin
 */
export class AdminClient implements IAdminClient {
    readonly typeName = "Admin";
    readonly methods: MethodInfo[] = [
        { service: this, name: "query", I: Query, O: QueryResponse }
    ];
    constructor(private readonly _transport: RpcTransport) {
    }
    query(input: Query, options?: RpcOptions): UnaryCall<Query, QueryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<Query, QueryResponse>("unary", this._transport, method, opt, i);
    }
}
